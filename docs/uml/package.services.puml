@startuml

package services {
    package xml {
        class Parser {
            CityMap getStreetSections(pathToXml: String)
            DeliveryRequest getDeliveryRequest(pathToXml: String, cityMap: CityMap)
        }
    }

    package tsp {
        abstract class TspSolver {
            #bestSolution: List<int>
            #bestSolutionCost: int
            +{abstract} Planning solve(graph: DeliveryGraph)
            #{abstract} WaypointIterator iterator(collection: AbstractWaypoint[], graph: DeliveryGraph)
            #{abstract} int bound(point: AbstractWaypoint, graph: DeliveryGraph)
        }

        class BasicTspSolver {
            +Planning solve(graph: DeliveryGraph)
            #WaypointIterator iterator(collection: AbstractWaypoint[], graph: DeliveryGraph)
            #int bound(point: AbstractWaypoint, graph: DeliveryGraph)
        }

        class AdvancedTspSolver {
            +Planning solve(graph: DeliveryGraph)
            #WaypointIterator iterator(collection: AbstractWaypoint[], graph: DeliveryGraph)
            #int bound(point: AbstractWaypoint, graph: DeliveryGraph)
        }

        class WaypointIterator {
            +AbstractWaypoint next()
            +boolean hasNext()
        }

        TspSolver <|-- BasicTspSolver
        TspSolver <|-- AdvancedTspSolver
    }

    package command {
        class CommandManager {
            +void execute(command: AbstractCommand)
            +void undo()
            +void redo()
        }

        interface Command {
            +void execute()
        }

        abstract class AbstractCommand implements Command {
            -reversible: boolean
            +{abstract} void execute()
            +{abstract} boolean isReversible()
            +{abstract} AbstractCommand getReversed()
        }

        class AddWaypointCommand extends AbstractCommand {
            -waypoint: AbstractWaypoint
            -planning: Planning
            -map: CityMap
            +void execute()
            +boolean isReversible()
            +AbstractCommand getReversed()
        }

        class AddWaypointAfterCommand extends AddWaypointCommand {
            -index: int
            +void execute()
            +AbstractCommand getReversed()
        }

        class RemoveWaypointAfterCommand extends RemoveWaypointCommand {
            -index: int
            +AbstractCommand getReversed()
        }

        class RemoveWaypointCommand extends AbstractCommand {
            -waypoint: AbstractWaypoint
            -planning: Planning
            -map: CityMap
            +void execute()
            +boolean isReversible()
            +AbstractCommand getReversed()
        }

        CommandManager o-left- AbstractCommand: done
        CommandManager o-left- AbstractCommand: undone


    }
}


@enduml
