@startuml

package services {
    package xml {
        class Parser {
            CityMap getStreetSections(pathToXml: String)
            DeliveryRequest getDeliveryRequest(pathToXml: String, cityMap: CityMap)
        }
    }

    package tsp {
        abstract class TspSolver {
            #bestSolution: List<int>
            #bestSolutionCost: int
            +{abstract} Planning solve(graph: DeliveryGraph)
            #{abstract} WayPointIterator iterator(collection: AbstractWayPoint[], graph: DeliveryGraph)
            #{abstract} int bound(point: AbstractWayPoint, graph: DeliveryGraph)
        }

        class BasicTspSolver {
            +Planning solve(graph: DeliveryGraph)
            #WayPointIterator iterator(collection: AbstractWayPoint[], graph: DeliveryGraph)
            #int bound(point: AbstractWayPoint, graph: DeliveryGraph)
        }

        class AdvancedTspSolver {
            +Planning solve(graph: DeliveryGraph)
            #WayPointIterator iterator(collection: AbstractWayPoint[], graph: DeliveryGraph)
            #int bound(point: AbstractWayPoint, graph: DeliveryGraph)
        }

        class WayPointIterator {
            +AbstractWayPoint next()
            +boolean hasNext()
        }

        TspSolver <|-- BasicTspSolver
        TspSolver <|-- AdvancedTspSolver
    }

    package command {
        class CommandManager {
            +void execute(command: AbstractCommand)
            +void undo()
            +void redo()
        }

        interface Command {
            +void execute()
        }

        abstract class AbstractCommand implements Command {
            -reversible: boolean
            +{abstract} void execute()
            +{abstract} boolean isReversible()
            +{abstract} AbstractCommand getReversed()
        }

        class AddWayPointCommand extends AbstractCommand {
            -wayPoint: AbstractWayPoint
            +void execute()
            +boolean isReversible()
            +AbstractCommand getReversed()
        }

        class RemoveWayPoint extends AbstractCommand {
            -wayPoint: AbstractWayPoint
            +void execute()
            +boolean isReversible()
            +AbstractCommand getReversed()
        }

        CommandManager o-left- AbstractCommand: done
        CommandManager o-left- AbstractCommand: undone


    }
}



@enduml
