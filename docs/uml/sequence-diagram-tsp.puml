@startuml
actor "Caller\n(anyone or anything)" as CPS
participant TspSolver as TSP
participant "planning: Planning" as Pl
participant "it: Iterator" as it

CPS -> TSP : solve(**deliveryGraph**: DeliveryGraph)
activate TSP

    TSP -> TSP : branchAndBound(\n\t**lastSeen**: AbstractWayPoint,\n\t**unseen**: AbstractWayPoint[],\n\t**seen**: AbstractWayPoint[],\n\t**deliveryGraph**: DeliveryGraph,\n\t**cost** : int)
    activate TSP

        alt unseen.size() == 0
            TSP -> TSP : cost += lastSeen.getDuration()
            alt betterCost(**cost**)
                TSP -> TSP : updateBestCost(**cost**)
            end
        else unseen.size != 0
            alt cost + bound(cost) < getBestCost()
                create it
                TSP -> it : iterator(**unseen**)
                loop while it.hasNext()
                    TSP -> it : next()
                    activate it
                    TSP <-- it : //next//
                    deactivate it
                    TSP -> TSP : unseen.remove(**next**)
                    TSP -> TSP : seen.add(**next**)
                    TSP -> TSP : newCost = getNewCost(**cost**, **lastSeen**, **next**, **deliveryGraph**)
                    note left
                        Some subcalls are omitted here
                        for more clarity
                    end note
                    TSP -> TSP : branchAndBound(**next**, **unseen**, **seen**, **deliveryGraph**, **newCost**)
                    activate TSP
                        note left : Recursive call
                    deactivate TSP
                    TSP -> TSP : seen.remove(**next**)
                    TSP -> TSP : unseen.add(**next**)
                end
                destroy it
            end


        end

    deactivate TSP

    create Pl
    TSP -> Pl : <<create>>

    CPS <-- TSP : planning

deactivate TSP

@enduml
