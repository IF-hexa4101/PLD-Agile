@startuml

package model {
    class CityMap {
       #List<Route> shortestPath(startWaypoint: AbstractWaypoint, endWaypoints: List<AbstractWaypoint>)
       +DeliveryGraph computeDeliveryGraph(request: DeliveryRequest)
       +List<Intersection> getIntersections()
       +List<StreetSection> getStreetSections()
       +Intersection getIntersection(idIntersection: int)
    }

    class DeliveryGraph {
        +int size()
        +Route getRoute(startId: int, endId: int)
    }

    class StreetSection {
        -length: int
        -duration: int
        -streetName: String
        +Intersection getStartIntersection()
        +Intersection getEndIntersection()
        +int getDuration()
        +int getLength()
    }

    class Intersection {
        -id: int
        -x: int
        -y: int
        +int getX()
        +int getY()
        #int getId()
    }

    abstract class AbstractWaypoint {
    	-deliveryTimeStart: int
    	-deliveryTimeEnd: int
    	+{abstract} int getDuration()
    	+int getTimeStart()
    	+int getTimeEnd()
    	+Intersection getIntersection()
    	+int getX()
    	+int getY()
    	#int getId()
    }

    class DeliveryAddress {
        -deliveryDuration: int
        +int getDuration()
    }

    class Warehouse {
        -loadingDuration
        +int getDuration()
    }

    class DeliveryRequest {
        -startTime: int
        +void addDeliveryAddress(address: DeliveryAddress)
        +void removeDeliveryAddress(address: DeliveryAddress)
        +Warehouse getWarehouse()
        +List<DeliveryAddress> getDeliveryAddresses()
    }

    class Planning {
        +int getFullTime()
        +int getRoutes()
        +Planning addWaypoint(point: AbstractWaypoint, map: CityMap)
        +Planning addWaypoint(point: AbstractWaypoint, afterPoint: AbstractWaypoint, map: CityMap)
        +Planning removeWaypoint(point: AbstractWaypoint, map: CityMap)
    }

    class Route {
        -duration: int
        +Waypoint getStartWaypoint()
        +Waypoint getEndWaypoint()
        +int getDuration()
    }

    CityMap o-- StreetSection
    CityMap o-- Intersection
    AbstractWaypoint --> Intersection
    StreetSection --> Intersection : end
    StreetSection --> Intersection : start
    Route o-- StreetSection
    Route --> AbstractWaypoint : end
    Route --> AbstractWaypoint : start
    AbstractWaypoint <|-- DeliveryAddress
    AbstractWaypoint <|-- Warehouse
    DeliveryRequest o-- DeliveryAddress
    DeliveryRequest -left-> Warehouse : warehouse
    DeliveryGraph o-- Route : routes
    Planning o-- Route
}

@enduml
