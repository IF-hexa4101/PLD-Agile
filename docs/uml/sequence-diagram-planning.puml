@startuml
actor Client as Cli
participant View as V
participant "mainController: MainController" as C
participant ReadyState as RS
participant "nextState:\nComputingPlanningState" as CPS
participant TSPSolver as TSP
participant "cityMap: CityMap" as CM

Cli -> V : Click on //Compute Planning//
V -> C : onComputePlanningButtonAction(**event**)
activate C
C -> RS : onComputePlanningButtonAction(**mainController**)
activate RS

create CPS
RS -> CPS
C <<-- RS: nextState
deactivate RS

C -> C: applyState(**nextState**)
activate C
C -> RS: leaveState(**mainController**)
activate RS
C <<-- RS
deactivate RS

C -> CPS: enterState(**mainController**)
activate CPS
    create TSP
    C -> TSP: <<create>>

    C <- CPS: getCityMap()
    C -->> CPS: cityMap
    C <- CPS: getDeliveryRequest()
    C -->> CPS: deliveryRequest

    CPS -> CM: getDeliveryGraph(**deliveryRequest**)
    activate CM

    CPS <<-- CM: deliveryGraph
    note right: <- This will be explained\nin another seqence diagram\n(see **sequence-diagram-dijkstra**)
    deactivate CM

    CPS -> TSP: solve(**deliveryGraph**)
    activate TSP
    CPS <<-- TSP: planning
    note right: ← This will be explained\nin another sequence diagram\n(see **sequence-diagram-tsp**)
    deactivate TSP

    C <- CPS: setPlanning(**planning**)
    C -->> CPS

    C <<-- CPS
deactivate CPS
C -> C: setState(nextState)
activate C
deactivate C
deactivate C
deactivate C

@enduml
